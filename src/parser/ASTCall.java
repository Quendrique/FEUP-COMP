/* Generated By:JJTree: Do not edit this line. ASTCall.java Version 6.0 */
/* JavaCCOptions:MULTI=true,NODE_USES_PARSER=false,VISITOR=false,TRACK_TOKENS=false,NODE_PREFIX=AST,NODE_EXTENDS=,NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
package parser;

import semantic.*;

public
class ASTCall extends SimpleNode {

  protected String value;
  protected String className;
  protected boolean isStatic;

  public ASTCall(int id) {
    super(id);
    this.isStatic = false;
  }

  public ASTCall(Jmm p, int id) {
    super(p, id);
    this.isStatic = false;
  }

  public String getValue() {
    return this.value;
  }

  public void setValue(String value) {
    this.value = value;
  }

  public boolean isStatic() {
    return this.isStatic;
  }

  @Override
  public String getActualReturnType() {
    if (this.actualReturnType == "") {
      STFunction function = SimpleNode.symbolTable.doesFunctionExist(this.value);
      if (function != null) {
        this.actualReturnType = function.getReturn().getType();
      }
    }
    return this.actualReturnType;
  }

  @Override
  public String getReturnType() {
    STFunction func = SimpleNode.symbolTable.doesFunctionExist(this.value);
    if(func != null)
      this.actualReturnType = func.getReturn().getType();
    else
      this.actualReturnType = "void";
    //followed by call or length
    if (this.jjtGetNumChildren() > 1
        || (this.jjtGetNumChildren() == 1 && this.jjtGetChild(0).getId() != JmmTreeConstants.JJTARGS)) {
      SimpleNode child = (SimpleNode) this.jjtGetChild(0);
      return child.getReturnType();
      //if function call external to the class, return null ??
    } else {
      return this.actualReturnType;
    }
  }

  @Override
  public void checkNodeSemantic() {

    if (this.parent != null) {
      String parentReturnType = ((SimpleNode) this.parent).getActualReturnType();
      STFunction functionCalled = SimpleNode.symbolTable.doesFunctionExist(this.value);
      if (((SimpleNode) this.parent).getId() == JmmTreeConstants.JJTIDENTIFIER) {
        STO parentSymbol = SimpleNode.symbolTable.doesSymbolExist(((ASTIdentifier) this.parent).getIdentifier(), ((ASTIdentifier) this.parent).getScope());
        if (parentSymbol != null) {
          if (!parentSymbol.isInitialized()) {
            super.flagError();
            super.printSemanticError("Variable " + ((ASTIdentifier) this.parent).getIdentifier() + " not initialized");
          }
        } else {
          this.isStatic = true;
        }
      }
  
      if (parentReturnType.equals(SimpleNode.className) || parentReturnType.equals("this")) {
        if (functionCalled != null) {
          this.actualReturnType = functionCalled.getReturn().getType();
        } else {
          super.flagError();
          super.printSemanticError("Invalid call to method (method not found in this class)");
        }
      } else if (parentReturnType.equals("int") || parentReturnType.equals("int[]") || parentReturnType.equals("boolean")  ) {
        super.flagError();
        super.printSemanticError("Invalid call to method (can't invoke methods on primitives)");
      }
    }
    //System.out.println("checking if function " + this.value + " exists in function table");

    /*
      FindMaximum fm;
      fm.get_array(); -> should work, isn't
    */
  }

  public void dump(String prefix) {
    System.out.println(toString(prefix) + ": " + this.value);
    if (children != null) {
      for (int i = 0; i < children.length; ++i) {
        SimpleNode n = (SimpleNode)children[i];
        if (n != null) {
          n.dump(prefix + "    ");
        }
      }
    }
  }

}
/* JavaCC - OriginalChecksum=b64b01ac41baa4ccb219eac917d0e841 (do not edit this line) */
