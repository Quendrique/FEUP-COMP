/* Jmm.java */
/* Generated By:JJTree&JavaCC: Do not edit this line. Jmm.java */
package parser;

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import semantic.*;
import codeGeneration.*;

public class Jmm/*@bgen(jjtree)*/implements JmmTreeConstants, JmmConstants {/*@bgen(jjtree)*/
  protected static JJTJmmState jjtree = new JJTJmmState();
    static int errorCount=0;

    public static void main(String args[]) throws ParseException, IOException{

    final String FILENAME = args[0];

    BufferedReader br = null;
    FileReader fr = null;

    try {
        fr = new FileReader(FILENAME);
        br = new BufferedReader(fr);

    } catch (IOException e) {
        e.printStackTrace();
    }

    Jmm myJmm = new Jmm(br);
    SimpleNode root = myJmm.Program();
    root.dump("");

    root.buildSymbolTable();
    root.checkSemantics();
    root.symbolTable.dump();

    System.out.println("\u005cn\u005cnEntering code Generation");
    Generator codeGenerator = new Generator(root);
    codeGenerator.generate();

 }

  static final public SimpleNode Program() throws ParseException {/*@bgen(jjtree) Program */
  ASTProgram jjtn000 = new ASTProgram(JJTPROGRAM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      ClassDeclaration();
{if ("" != null) return jjtn000;}
      jj_consume_token(0);
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
    throw new Error("Missing return statement in function");
  }

  static final public void ClassDeclaration() throws ParseException {/*@bgen(jjtree) ClassDeclaration */
                          ASTClassDeclaration jjtn000 = new ASTClassDeclaration(JJTCLASSDECLARATION);
                          boolean jjtc000 = true;
                          jjtree.openNodeScope(jjtn000);Token t1, t2;
    try {
      jj_consume_token(CLASS);
      t1 = jj_consume_token(IDENTIFIER);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case EXTENDS:{
        jj_consume_token(EXTENDS);
        t2 = jj_consume_token(IDENTIFIER);
jjtn000.setExtends(t2.image);
        break;
        }
      default:
        jj_la1[0] = jj_gen;
        ;
      }
      jj_consume_token(OB);
      label_1:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case INT:
        case BOOLEAN:
        case IDENTIFIER:{
          ;
          break;
          }
        default:
          jj_la1[1] = jj_gen;
          break label_1;
        }
        VarDeclaration();
      }
      label_2:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case PUBLIC:{
          ;
          break;
          }
        default:
          jj_la1[2] = jj_gen;
          break label_2;
        }
        if (jj_2_1(2)) {
          MainDeclaration();
        } else {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case PUBLIC:{
            MethodDeclaration();
            break;
            }
          default:
            jj_la1[3] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
      }
      jj_consume_token(CB);
jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
jjtn000.setName(t1.image);
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  static final public void VarDeclaration() throws ParseException {/*@bgen(jjtree) VarDeclaration */
                        ASTVarDeclaration jjtn000 = new ASTVarDeclaration(JJTVARDECLARATION);
                        boolean jjtc000 = true;
                        jjtree.openNodeScope(jjtn000);String t1; Token t2;
    try {
      t1 = Type();
      t2 = jj_consume_token(IDENTIFIER);
jjtn000.setIdentifier(t2.image); jjtn000.type = t1;
      jj_consume_token(SCM);
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  static final public void MainDeclaration() throws ParseException {/*@bgen(jjtree) MainDeclaration */
                         ASTMainDeclaration jjtn000 = new ASTMainDeclaration(JJTMAINDECLARATION);
                         boolean jjtc000 = true;
                         jjtree.openNodeScope(jjtn000);Token t;
    try {
      jj_consume_token(PUBLIC);
      jj_consume_token(STATIC);
      jj_consume_token(VOID);
      jj_consume_token(MAIN);
      jj_consume_token(OPRNT);
      jj_consume_token(STRING);
      jj_consume_token(OSQB);
      jj_consume_token(CSQB);
      t = jj_consume_token(IDENTIFIER);
      jj_consume_token(CPRNT);
      jj_consume_token(OB);
      label_3:
      while (true) {
        if (jj_2_2(2)) {
          ;
        } else {
          break label_3;
        }
        VarDeclaration();
      }
      label_4:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case IF:
        case WHILE:
        case OB:
        case OPRNT:
        case NOT:
        case TRUE:
        case FALSE:
        case THIS:
        case NEW:
        case IDENTIFIER:
        case INTEGERLITERAL:{
          ;
          break;
          }
        default:
          jj_la1[4] = jj_gen;
          break label_4;
        }
        Statement();
      }
      jj_consume_token(CB);
jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
jjtn000.setIdentifier(t.image);
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  static final public void MethodDeclaration() throws ParseException {/*@bgen(jjtree) MethodDeclaration */
                           ASTMethodDeclaration jjtn000 = new ASTMethodDeclaration(JJTMETHODDECLARATION);
                           boolean jjtc000 = true;
                           jjtree.openNodeScope(jjtn000);String t1; Token t2;
    try {
      jj_consume_token(PUBLIC);
      t1 = Type();
      t2 = jj_consume_token(IDENTIFIER);
      jj_consume_token(OPRNT);
      label_5:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case INT:
        case BOOLEAN:
        case IDENTIFIER:{
          ;
          break;
          }
        default:
          jj_la1[5] = jj_gen;
          break label_5;
        }
ASTMethodArguments jjtn001 = new ASTMethodArguments(JJTMETHODARGUMENTS);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
        try {
          MethodArgument();
          label_6:
          while (true) {
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case CM:{
              ;
              break;
              }
            default:
              jj_la1[6] = jj_gen;
              break label_6;
            }
            jj_consume_token(CM);
            MethodArgument();
          }
        } catch (Throwable jjte001) {
if (jjtc001) {
            jjtree.clearNodeScope(jjtn001);
            jjtc001 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte001 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte001;}
          }
          if (jjte001 instanceof ParseException) {
            {if (true) throw (ParseException)jjte001;}
          }
          {if (true) throw (Error)jjte001;}
        } finally {
if (jjtc001) {
            jjtree.closeNodeScope(jjtn001, true);
          }
        }
      }
      jj_consume_token(CPRNT);
      jj_consume_token(OB);
      label_7:
      while (true) {
        if (jj_2_3(2)) {
          ;
        } else {
          break label_7;
        }
        VarDeclaration();
      }
      label_8:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case IF:
        case WHILE:
        case OB:
        case OPRNT:
        case NOT:
        case TRUE:
        case FALSE:
        case THIS:
        case NEW:
        case IDENTIFIER:
        case INTEGERLITERAL:{
          ;
          break;
          }
        default:
          jj_la1[7] = jj_gen;
          break label_8;
        }
        Statement();
      }
      jj_consume_token(RETURN);
      Expression();
ASTReturn jjtn002 = new ASTReturn(JJTRETURN);
                                boolean jjtc002 = true;
                                jjtree.openNodeScope(jjtn002);
      try {
        jj_consume_token(SCM);
      } finally {
if (jjtc002) {
                                  jjtree.closeNodeScope(jjtn002,  1);
                                }
      }
      jj_consume_token(CB);
jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
jjtn000.setName(t2.image);
        jjtn000.type = t1;
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  static final public void MethodArgument() throws ParseException {/*@bgen(jjtree) MethodArgument */
                        ASTMethodArgument jjtn000 = new ASTMethodArgument(JJTMETHODARGUMENT);
                        boolean jjtc000 = true;
                        jjtree.openNodeScope(jjtn000);String t1; Token t2;
    try {
      t1 = Type();
      t2 = jj_consume_token(IDENTIFIER);
jjtree.closeNodeScope(jjtn000, true);
                                  jjtc000 = false;
jjtn000.setIdentifier(t2.image); jjtn000.type = t1;
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

//LOOKAHEAD 2
  static final public String Type() throws ParseException {Token t; String returnValue;
    if (jj_2_4(2)) {
      jj_consume_token(INT);
      jj_consume_token(OSQB);
      jj_consume_token(CSQB);
returnValue = "int[]";
    } else {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case BOOLEAN:{
        t = jj_consume_token(BOOLEAN);
returnValue = "boolean";
        break;
        }
      case INT:{
        t = jj_consume_token(INT);
returnValue = "int";
        break;
        }
      case IDENTIFIER:{
        t = jj_consume_token(IDENTIFIER);
returnValue = t.image;
        break;
        }
      default:
        jj_la1[8] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
{if ("" != null) return returnValue;}
    throw new Error("Missing return statement in function");
  }

//LOOKAHEAD 2
  static final public void Statement() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case OB:{
      jj_consume_token(OB);
      label_9:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case IF:
        case WHILE:
        case OB:
        case OPRNT:
        case NOT:
        case TRUE:
        case FALSE:
        case THIS:
        case NEW:
        case IDENTIFIER:
        case INTEGERLITERAL:{
          ;
          break;
          }
        default:
          jj_la1[9] = jj_gen;
          break label_9;
        }
        Statement();
      }
      jj_consume_token(CB);
      break;
      }
    case IF:{
      If();
      break;
      }
    case WHILE:{
      While();
      break;
      }
    case OPRNT:
    case NOT:
    case TRUE:
    case FALSE:
    case THIS:
    case NEW:
    case IDENTIFIER:
    case INTEGERLITERAL:{
      if (jj_2_5(2)) {
        Assign();
      } else if (jj_2_6(2)) {
        ArrayAssign();
      } else {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case OPRNT:
        case NOT:
        case TRUE:
        case FALSE:
        case THIS:
        case NEW:
        case IDENTIFIER:
        case INTEGERLITERAL:{
          Expression();
          jj_consume_token(SCM);
          break;
          }
        default:
          jj_la1[10] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      break;
      }
    default:
      jj_la1[11] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void Assign() throws ParseException {/*@bgen(jjtree) Assign */
                ASTAssign jjtn000 = new ASTAssign(JJTASSIGN);
                boolean jjtc000 = true;
                jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(IDENTIFIER);
jjtn000.lhsIdentifier = t.image;
      jj_consume_token(EQLS);
      Expression();
      jj_consume_token(SCM);
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  static final public void ArrayAssign() throws ParseException {/*@bgen(jjtree) ArrayAssign */
                     ASTArrayAssign jjtn000 = new ASTArrayAssign(JJTARRAYASSIGN);
                     boolean jjtc000 = true;
                     jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(IDENTIFIER);
jjtn000.lhsIdentifier = t.image;
      jj_consume_token(OSQB);
ASTArrayIndex jjtn001 = new ASTArrayIndex(JJTARRAYINDEX);
                                                               boolean jjtc001 = true;
                                                               jjtree.openNodeScope(jjtn001);
      try {
        Expression();
      } catch (Throwable jjte001) {
if (jjtc001) {
                                                                 jjtree.clearNodeScope(jjtn001);
                                                                 jjtc001 = false;
                                                               } else {
                                                                 jjtree.popNode();
                                                               }
                                                               if (jjte001 instanceof RuntimeException) {
                                                                 {if (true) throw (RuntimeException)jjte001;}
                                                               }
                                                               if (jjte001 instanceof ParseException) {
                                                                 {if (true) throw (ParseException)jjte001;}
                                                               }
                                                               {if (true) throw (Error)jjte001;}
      } finally {
if (jjtc001) {
                                                                 jjtree.closeNodeScope(jjtn001, true);
                                                               }
      }
      jj_consume_token(CSQB);
      jj_consume_token(EQLS);
      Expression();
      jj_consume_token(SCM);
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  static final public void While() throws ParseException {/*@bgen(jjtree) While */
  ASTWhile jjtn000 = new ASTWhile(JJTWHILE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(WHILE);
      jj_consume_token(OPRNT);
      try {
        Expression();
        jj_consume_token(CPRNT);
      } catch (ParseException e) {
System.out.println(e.getMessage());
      Jmm.errorCount++;
      Token t;

      if(Jmm.errorCount>10){
          System.out.println(Jmm.errorCount + " errors: exiting program");
          System.exit(1);
        }

      do {
        t = getNextToken();
      } while (t.kind != CPRNT);
      }
      Statement();
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void If() throws ParseException {/*@bgen(jjtree) If */
  ASTIf jjtn000 = new ASTIf(JJTIF);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(IF);
      jj_consume_token(OPRNT);
ASTCondition jjtn001 = new ASTCondition(JJTCONDITION);
                   boolean jjtc001 = true;
                   jjtree.openNodeScope(jjtn001);
      try {
        Expression();
      } catch (Throwable jjte001) {
if (jjtc001) {
                     jjtree.clearNodeScope(jjtn001);
                     jjtc001 = false;
                   } else {
                     jjtree.popNode();
                   }
                   if (jjte001 instanceof RuntimeException) {
                     {if (true) throw (RuntimeException)jjte001;}
                   }
                   if (jjte001 instanceof ParseException) {
                     {if (true) throw (ParseException)jjte001;}
                   }
                   {if (true) throw (Error)jjte001;}
      } finally {
if (jjtc001) {
                     jjtree.closeNodeScope(jjtn001, true);
                   }
      }
      jj_consume_token(CPRNT);
ASTThen jjtn002 = new ASTThen(JJTTHEN);
                                                   boolean jjtc002 = true;
                                                   jjtree.openNodeScope(jjtn002);
      try {
        Statement();
      } catch (Throwable jjte002) {
if (jjtc002) {
                                                     jjtree.clearNodeScope(jjtn002);
                                                     jjtc002 = false;
                                                   } else {
                                                     jjtree.popNode();
                                                   }
                                                   if (jjte002 instanceof RuntimeException) {
                                                     {if (true) throw (RuntimeException)jjte002;}
                                                   }
                                                   if (jjte002 instanceof ParseException) {
                                                     {if (true) throw (ParseException)jjte002;}
                                                   }
                                                   {if (true) throw (Error)jjte002;}
      } finally {
if (jjtc002) {
                                                     jjtree.closeNodeScope(jjtn002, true);
                                                   }
      }
      jj_consume_token(ELSE);
ASTElse jjtn003 = new ASTElse(JJTELSE);
                                                                            boolean jjtc003 = true;
                                                                            jjtree.openNodeScope(jjtn003);
      try {
        Statement();
      } catch (Throwable jjte003) {
if (jjtc003) {
                                                                              jjtree.clearNodeScope(jjtn003);
                                                                              jjtc003 = false;
                                                                            } else {
                                                                              jjtree.popNode();
                                                                            }
                                                                            if (jjte003 instanceof RuntimeException) {
                                                                              {if (true) throw (RuntimeException)jjte003;}
                                                                            }
                                                                            if (jjte003 instanceof ParseException) {
                                                                              {if (true) throw (ParseException)jjte003;}
                                                                            }
                                                                            {if (true) throw (Error)jjte003;}
      } finally {
if (jjtc003) {
                                                                              jjtree.closeNodeScope(jjtn003, true);
                                                                            }
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  static final public void Expression() throws ParseException {
    And();
  }

  static final public void And() throws ParseException {
    Lt();
    label_10:
    while (true) {
      if (jj_2_7(2)) {
        ;
      } else {
        break label_10;
      }
      jj_consume_token(AND);
ASTAnd jjtn001 = new ASTAnd(JJTAND);
                             boolean jjtc001 = true;
                             jjtree.openNodeScope(jjtn001);
      try {
        Lt();
      } catch (Throwable jjte001) {
if (jjtc001) {
                               jjtree.clearNodeScope(jjtn001);
                               jjtc001 = false;
                             } else {
                               jjtree.popNode();
                             }
                             if (jjte001 instanceof RuntimeException) {
                               {if (true) throw (RuntimeException)jjte001;}
                             }
                             if (jjte001 instanceof ParseException) {
                               {if (true) throw (ParseException)jjte001;}
                             }
                             {if (true) throw (Error)jjte001;}
      } finally {
if (jjtc001) {
                               jjtree.closeNodeScope(jjtn001,  2);
                             }
      }
    }
  }

  static final public void Lt() throws ParseException {
    AddSub();
    label_11:
    while (true) {
      if (jj_2_8(2)) {
        ;
      } else {
        break label_11;
      }
      jj_consume_token(LS);
ASTLessThan jjtn001 = new ASTLessThan(JJTLESSTHAN);
                                boolean jjtc001 = true;
                                jjtree.openNodeScope(jjtn001);
      try {
        AddSub();
      } catch (Throwable jjte001) {
if (jjtc001) {
                                  jjtree.clearNodeScope(jjtn001);
                                  jjtc001 = false;
                                } else {
                                  jjtree.popNode();
                                }
                                if (jjte001 instanceof RuntimeException) {
                                  {if (true) throw (RuntimeException)jjte001;}
                                }
                                if (jjte001 instanceof ParseException) {
                                  {if (true) throw (ParseException)jjte001;}
                                }
                                {if (true) throw (Error)jjte001;}
      } finally {
if (jjtc001) {
                                  jjtree.closeNodeScope(jjtn001,  2);
                                }
      }
    }
  }

  static final public void AddSub() throws ParseException {Token t;
    MultDiv();
    label_12:
    while (true) {
      if (jj_2_9(2)) {
        ;
      } else {
        break label_12;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case PLS:{
        t = jj_consume_token(PLS);
        break;
        }
      case MNS:{
        t = jj_consume_token(MNS);
        break;
        }
      default:
        jj_la1[12] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      MultDiv();
ASTAddSub jjtn001 = new ASTAddSub(JJTADDSUB);
                                                             boolean jjtc001 = true;
                                                             jjtree.openNodeScope(jjtn001);
      try {
jjtree.closeNodeScope(jjtn001,  2);
                                                             jjtc001 = false;
jjtn001.setOp(t.image);
      } finally {
if (jjtc001) {
                                                               jjtree.closeNodeScope(jjtn001,  2);
                                                             }
      }
    }
  }

  static final public void MultDiv() throws ParseException {Token t;
    Literal();
    label_13:
    while (true) {
      if (jj_2_10(2)) {
        ;
      } else {
        break label_13;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case ASTRSK:{
        t = jj_consume_token(ASTRSK);
        break;
        }
      case SLSH:{
        t = jj_consume_token(SLSH);
        break;
        }
      default:
        jj_la1[13] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      Literal();
ASTMultDiv jjtn001 = new ASTMultDiv(JJTMULTDIV);
                                                                boolean jjtc001 = true;
                                                                jjtree.openNodeScope(jjtn001);
      try {
jjtree.closeNodeScope(jjtn001,  2);
                                                                jjtc001 = false;
jjtn001.setOp(t.image);
      } finally {
if (jjtc001) {
                                                                  jjtree.closeNodeScope(jjtn001,  2);
                                                                }
      }
    }
  }

  static final public void Literal() throws ParseException {Token t;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case INTEGERLITERAL:{
      t = jj_consume_token(INTEGERLITERAL);
      LiteralNR();
ASTIntegerLiteral jjtn001 = new ASTIntegerLiteral(JJTINTEGERLITERAL);
                                       boolean jjtc001 = true;
                                       jjtree.openNodeScope(jjtn001);
      try {
jjtree.closeNodeScope(jjtn001, true);
                                       jjtc001 = false;
jjtn001.setValue(Integer.parseInt(t.image));
      } finally {
if (jjtc001) {
                                         jjtree.closeNodeScope(jjtn001, true);
                                       }
      }
      break;
      }
    case TRUE:{
      jj_consume_token(TRUE);
      LiteralNR();
ASTBooleanLiteral jjtn002 = new ASTBooleanLiteral(JJTBOOLEANLITERAL);
                         boolean jjtc002 = true;
                         jjtree.openNodeScope(jjtn002);
      try {
jjtree.closeNodeScope(jjtn002, true);
                         jjtc002 = false;
jjtn002.returnType = "boolean";
      } finally {
if (jjtc002) {
                           jjtree.closeNodeScope(jjtn002, true);
                         }
      }
      break;
      }
    case FALSE:{
      jj_consume_token(FALSE);
      LiteralNR();
ASTBooleanLiteral jjtn003 = new ASTBooleanLiteral(JJTBOOLEANLITERAL);
                          boolean jjtc003 = true;
                          jjtree.openNodeScope(jjtn003);
      try {
jjtree.closeNodeScope(jjtn003, true);
                          jjtc003 = false;
jjtn003.returnType = "boolean";
      } finally {
if (jjtc003) {
                            jjtree.closeNodeScope(jjtn003, true);
                          }
      }
      break;
      }
    case IDENTIFIER:{
ASTIdentifier jjtn004 = new ASTIdentifier(JJTIDENTIFIER);
      boolean jjtc004 = true;
      jjtree.openNodeScope(jjtn004);
      try {
        t = jj_consume_token(IDENTIFIER);
jjtn004.setIdentifier(t.image);
        LiteralNR();
      } catch (Throwable jjte004) {
if (jjtc004) {
        jjtree.clearNodeScope(jjtn004);
        jjtc004 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte004 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte004;}
      }
      if (jjte004 instanceof ParseException) {
        {if (true) throw (ParseException)jjte004;}
      }
      {if (true) throw (Error)jjte004;}
      } finally {
if (jjtc004) {
        jjtree.closeNodeScope(jjtn004, true);
      }
      }
      break;
      }
    case THIS:{
      jj_consume_token(THIS);
ASTThis jjtn005 = new ASTThis(JJTTHIS);
             boolean jjtc005 = true;
             jjtree.openNodeScope(jjtn005);
      try {
        LiteralNR();
      } catch (Throwable jjte005) {
if (jjtc005) {
               jjtree.clearNodeScope(jjtn005);
               jjtc005 = false;
             } else {
               jjtree.popNode();
             }
             if (jjte005 instanceof RuntimeException) {
               {if (true) throw (RuntimeException)jjte005;}
             }
             if (jjte005 instanceof ParseException) {
               {if (true) throw (ParseException)jjte005;}
             }
             {if (true) throw (Error)jjte005;}
      } finally {
if (jjtc005) {
               jjtree.closeNodeScope(jjtn005, true);
             }
      }
      break;
      }
    case NEW:{
      jj_consume_token(NEW);
      New();
      break;
      }
    case NOT:{
      jj_consume_token(NOT);
      Expression();
      LiteralNR();
      break;
      }
    case OPRNT:{
      jj_consume_token(OPRNT);
      Expression();
      jj_consume_token(CPRNT);
      LiteralNR();
      break;
      }
    default:
      jj_la1[14] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void LiteralNR() throws ParseException {Token t;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case OSQB:{
      jj_consume_token(OSQB);
ASTArrayIndex jjtn001 = new ASTArrayIndex(JJTARRAYINDEX);
             boolean jjtc001 = true;
             jjtree.openNodeScope(jjtn001);
      try {
        Expression();
      } catch (Throwable jjte001) {
if (jjtc001) {
               jjtree.clearNodeScope(jjtn001);
               jjtc001 = false;
             } else {
               jjtree.popNode();
             }
             if (jjte001 instanceof RuntimeException) {
               {if (true) throw (RuntimeException)jjte001;}
             }
             if (jjte001 instanceof ParseException) {
               {if (true) throw (ParseException)jjte001;}
             }
             {if (true) throw (Error)jjte001;}
      } finally {
if (jjtc001) {
               jjtree.closeNodeScope(jjtn001, true);
             }
      }
      jj_consume_token(CSQB);
      LiteralNR();
      break;
      }
    case PNT:{
      jj_consume_token(PNT);
      MethodOrLength();
      break;
      }
    default:
      jj_la1[15] = jj_gen;

    }
  }

  static final public void MethodOrLength() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case LENGTH:{
ASTLength jjtn001 = new ASTLength(JJTLENGTH);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
      try {
        jj_consume_token(LENGTH);
      } finally {
if (jjtc001) {
            jjtree.closeNodeScope(jjtn001, true);
          }
      }
      LiteralNR();
      break;
      }
    case IDENTIFIER:{
      Call();
      break;
      }
    default:
      jj_la1[16] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void New() throws ParseException {/*@bgen(jjtree) New */
              ASTNew jjtn000 = new ASTNew(JJTNEW);
              boolean jjtc000 = true;
              jjtree.openNodeScope(jjtn000);Token t;
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case INT:{
        jj_consume_token(INT);
        jj_consume_token(OSQB);
        Expression();
        jj_consume_token(CSQB);
        LiteralNR();
jjtree.closeNodeScope(jjtn000, true);
                                                       jjtc000 = false;
jjtn000.returnType="int[]";
        break;
        }
      case IDENTIFIER:{
        t = jj_consume_token(IDENTIFIER);
        jj_consume_token(OPRNT);
        jj_consume_token(CPRNT);
        LiteralNR();
jjtree.closeNodeScope(jjtn000, true);
                                                     jjtc000 = false;
jjtn000.returnType=t.image;
        break;
        }
      default:
        jj_la1[17] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void Call() throws ParseException {/*@bgen(jjtree) Call */
              ASTCall jjtn000 = new ASTCall(JJTCALL);
              boolean jjtc000 = true;
              jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(IDENTIFIER);
jjtn000.setValue(t.image);
      jj_consume_token(OPRNT);
      label_14:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case OPRNT:
        case NOT:
        case TRUE:
        case FALSE:
        case THIS:
        case NEW:
        case IDENTIFIER:
        case INTEGERLITERAL:{
          ;
          break;
          }
        default:
          jj_la1[18] = jj_gen;
          break label_14;
        }
        Args();
      }
      jj_consume_token(CPRNT);
      LiteralNR();
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  static final public void Args() throws ParseException {/*@bgen(jjtree) Args */
  ASTArgs jjtn000 = new ASTArgs(JJTARGS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      Expression();
      label_15:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case CM:{
          ;
          break;
          }
        default:
          jj_la1[19] = jj_gen;
          break label_15;
        }
        jj_consume_token(CM);
        Expression();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  static private boolean jj_2_1(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  static private boolean jj_2_2(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  static private boolean jj_2_3(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  static private boolean jj_2_4(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  static private boolean jj_2_5(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  static private boolean jj_2_6(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  static private boolean jj_2_7(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  static private boolean jj_2_8(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  static private boolean jj_2_9(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  static private boolean jj_2_10(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_10(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  static private boolean jj_3R_24()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_4()) {
    jj_scanpos = xsp;
    if (jj_3R_33()) {
    jj_scanpos = xsp;
    if (jj_3R_34()) {
    jj_scanpos = xsp;
    if (jj_3R_35()) return true;
    }
    }
    }
    return false;
  }

  static private boolean jj_3_8()
 {
    if (jj_scan_token(LS)) return true;
    if (jj_3R_21()) return true;
    return false;
  }

  static private boolean jj_3R_22()
 {
    if (jj_3R_23()) return true;
    return false;
  }

  static private boolean jj_3R_19()
 {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(OSQB)) return true;
    return false;
  }

  static private boolean jj_3R_21()
 {
    if (jj_3R_22()) return true;
    return false;
  }

  static private boolean jj_3R_18()
 {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(EQLS)) return true;
    return false;
  }

  static private boolean jj_3_7()
 {
    if (jj_scan_token(AND)) return true;
    if (jj_3R_20()) return true;
    return false;
  }

  static private boolean jj_3R_20()
 {
    if (jj_3R_21()) return true;
    return false;
  }

  static private boolean jj_3_3()
 {
    if (jj_3R_17()) return true;
    return false;
  }

  static private boolean jj_3_6()
 {
    if (jj_3R_19()) return true;
    return false;
  }

  static private boolean jj_3_5()
 {
    if (jj_3R_18()) return true;
    return false;
  }

  static private boolean jj_3R_32()
 {
    if (jj_scan_token(OPRNT)) return true;
    return false;
  }

  static private boolean jj_3R_31()
 {
    if (jj_scan_token(NOT)) return true;
    return false;
  }

  static private boolean jj_3R_30()
 {
    if (jj_scan_token(NEW)) return true;
    return false;
  }

  static private boolean jj_3R_29()
 {
    if (jj_scan_token(THIS)) return true;
    return false;
  }

  static private boolean jj_3_2()
 {
    if (jj_3R_17()) return true;
    return false;
  }

  static private boolean jj_3R_28()
 {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  static private boolean jj_3R_27()
 {
    if (jj_scan_token(FALSE)) return true;
    return false;
  }

  static private boolean jj_3R_35()
 {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  static private boolean jj_3_10()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(37)) {
    jj_scanpos = xsp;
    if (jj_scan_token(36)) return true;
    }
    if (jj_3R_23()) return true;
    return false;
  }

  static private boolean jj_3R_34()
 {
    if (jj_scan_token(INT)) return true;
    return false;
  }

  static private boolean jj_3R_26()
 {
    if (jj_scan_token(TRUE)) return true;
    return false;
  }

  static private boolean jj_3R_33()
 {
    if (jj_scan_token(BOOLEAN)) return true;
    return false;
  }

  static private boolean jj_3R_16()
 {
    if (jj_scan_token(PUBLIC)) return true;
    if (jj_scan_token(STATIC)) return true;
    return false;
  }

  static private boolean jj_3R_25()
 {
    if (jj_scan_token(INTEGERLITERAL)) return true;
    return false;
  }

  static private boolean jj_3R_23()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_25()) {
    jj_scanpos = xsp;
    if (jj_3R_26()) {
    jj_scanpos = xsp;
    if (jj_3R_27()) {
    jj_scanpos = xsp;
    if (jj_3R_28()) {
    jj_scanpos = xsp;
    if (jj_3R_29()) {
    jj_scanpos = xsp;
    if (jj_3R_30()) {
    jj_scanpos = xsp;
    if (jj_3R_31()) {
    jj_scanpos = xsp;
    if (jj_3R_32()) return true;
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3_9()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(34)) {
    jj_scanpos = xsp;
    if (jj_scan_token(35)) return true;
    }
    if (jj_3R_22()) return true;
    return false;
  }

  static private boolean jj_3_4()
 {
    if (jj_scan_token(INT)) return true;
    if (jj_scan_token(OSQB)) return true;
    return false;
  }

  static private boolean jj_3R_17()
 {
    if (jj_3R_24()) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  static private boolean jj_3_1()
 {
    if (jj_3R_16()) return true;
    return false;
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public JmmTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private Token jj_scanpos, jj_lastpos;
  static private int jj_la;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[20];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x1000,0x0,0x2000,0x2000,0x822a0000,0x0,0x8000000,0x822a0000,0x0,0x822a0000,0x82000000,0x822a0000,0x0,0x0,0x82000000,0x10800000,0x0,0x0,0x82000000,0x8000000,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x40c0,0x0,0x0,0xde00,0x40c0,0x0,0xde00,0x40c0,0xde00,0xde00,0xde00,0xc,0x30,0xde00,0x0,0x6000,0x4040,0xde00,0x0,};
   }
  static final private JJCalls[] jj_2_rtns = new JJCalls[10];
  static private boolean jj_rescan = false;
  static private int jj_gc = 0;

  /** Constructor with InputStream. */
  public Jmm(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Jmm(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new JmmTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 20; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 20; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public Jmm(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new JmmTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 20; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 20; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public Jmm(JmmTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 20; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(JmmTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 20; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  @SuppressWarnings("serial")
  static private final class LookaheadSuccess extends java.lang.Error { }
  static final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  static private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk_f() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;
  static private int[] jj_lasttokens = new int[100];
  static private int jj_endpos;

  static private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[48];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 20; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 48; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

  static private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 10; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
            case 8: jj_3_9(); break;
            case 9: jj_3_10(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  static private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
