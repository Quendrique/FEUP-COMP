/* Generated By:JJTree: Do not edit this line. ASTAssign.java Version 6.0 */
/* JavaCCOptions:MULTI=true,NODE_USES_PARSER=false,VISITOR=false,TRACK_TOKENS=false,NODE_PREFIX=AST,NODE_EXTENDS=,NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
package parser;

import semantic.*;

public
class ASTAssign extends SimpleNode {

  public String lhsIdentifier;

  public ASTAssign(int id) {
    super(id);
  }

  public ASTAssign(Jmm p, int id) {
    super(p, id);
  }

  public String getLhs() {
    return this.lhsIdentifier;
  }

  @Override
  public void checkNodeSemantic() {
    //check if rhs variable exists
    STO lhs = SimpleNode.symbolTable.doesSymbolExist(this.lhsIdentifier, this.scope);
    if (lhs == null) {
      super.printSemanticError("Variable " + this.lhsIdentifier + " was not declared");
    }
    
    if(!((SimpleNode) this.jjtGetChild(0)).getReturnType().equals(lhs.getType())) {
      super.printSemanticError("Variable types not compatible");
    }

    lhs.initialize();

  }

  public void dump(String prefix) {
    System.out.println(toString(prefix) + ": " + this.lhsIdentifier);
    if (children != null) {
      for (int i = 0; i < children.length; ++i) {
        SimpleNode n = (SimpleNode)children[i];
        if (n != null) {
          n.dump(prefix + "    ");
        }
      }
    }
  }

}
/* JavaCC - OriginalChecksum=42171107bb3b507a7e69d9c464358f53 (do not edit this line) */
