/* Generated By:JJTree: Do not edit this line. ASTArrayAssign.java Version 6.0 */
/* JavaCCOptions:MULTI=true,NODE_USES_PARSER=false,VISITOR=false,TRACK_TOKENS=false,NODE_PREFIX=AST,NODE_EXTENDS=,NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
package parser;

import semantic.*;

public
class ASTArrayAssign extends SimpleNode {

  public String lhsIdentifier;

  public ASTArrayAssign(int id) {
    super(id);
  }

  public ASTArrayAssign(Jmm p, int id) {
    super(p, id);
  }

  @Override
  public void checkNodeSemantic() {
    //note: if it's an array, it's of the type int, hence the type checks using "int" and not lhs.getType() for example

    //check if rhs variable exists
    STO lhs = SimpleNode.symbolTable.doesSymbolExist(this.lhsIdentifier, this.scope);
    if (lhs == null) {
      super.printSemanticError("Variable " + this.lhsIdentifier + " was not declared");
    }

    //check if expression corresponding to the array index returns an int ??? needed?

    //check, if a variable is being assigned to the other, that their types match
    SimpleNode rhsNode;
    if (this.children != null) {
      rhsNode = (SimpleNode) this.children[1];
      if (rhsNode.toString().equals("Identifier")) {
        
        STO rhs = SimpleNode.symbolTable.doesSymbolExist(((ASTIdentifier) rhsNode).getIdentifier(), this.scope);

        if (rhsNode.children != null) {
          if (((SimpleNode) rhsNode).children[0].toString().equals("ArrayIndex")) {
            super.printSemanticError("Cannot assign variable " + ((ASTIdentifier) rhsNode).getIdentifier() + " of type " + rhs.getType() + " to variable " + this.lhsIdentifier + " of type " + lhs.getType());
          } else if (((SimpleNode) rhsNode).children[0].toString().equals("Length")) {
            // ??
          } else if (((SimpleNode) rhsNode).children[0].toString().equals("Call")) {
            //if function external to the class, assume it's correct and ignore
            STFunction functionBeingCalled = SimpleNode.symbolTable.doesFunctionExist(((ASTCall) rhsNode.children[0]).getValue());
            if (functionBeingCalled != null) {
              //check if variable is of type [class] TODO
              if (!functionBeingCalled.getReturn().getType().equals("int")) {
                super.printSemanticError("Return type for function " + ((ASTCall) rhsNode.children[0]).getValue() + " not compatible with variable " + this.lhsIdentifier + " of type " + lhs.getType());
              }
            }
            
          }
          return;
        } 
        if (rhs != null && !rhs.getType().equals("int")) {
          super.printSemanticError("Cannot assign variable " + ((ASTIdentifier) rhsNode).getIdentifier() + " of type " + rhs.getType() + " to variable " + this.lhsIdentifier + " of type " + lhs.getType());
        }
      }
    } 
  }

  public void dump(String prefix) {
    System.out.println(toString(prefix) + ": " + this.lhsIdentifier);
    if (children != null) {
      for (int i = 0; i < children.length; ++i) {
        SimpleNode n = (SimpleNode)children[i];
        if (n != null) {
          n.dump(prefix + "    ");
        }
      }
    }
  }

}
/* JavaCC - OriginalChecksum=17942b7bfb170b43eb29e6d2f58836be (do not edit this line) */
