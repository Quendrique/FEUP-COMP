/* Generated By:JJTree: Do not edit this line. ASTArgs.java Version 6.0 */
/* JavaCCOptions:MULTI=true,NODE_USES_PARSER=false,VISITOR=false,TRACK_TOKENS=false,NODE_PREFIX=AST,NODE_EXTENDS=,NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
package parser;

import semantic.*;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Iterator;

public class ASTArgs extends SimpleNode {
  public ASTArgs(int id) {
    super(id);
  }

  public ASTArgs(Jmm p, int id) {
    super(p, id);
  }

  @Override
  public void checkNodeSemantic() {

    for (int i = 0; i < this.jjtGetNumChildren(); i++) {
      ((ASTCall) this.parent).value += ((SimpleNode) this.jjtGetChild(i)).getReturnType();
    }

    // fixing call node
    SimpleNode call = (SimpleNode) this.parent;
    SimpleNode callParent = (SimpleNode) call.parent;
    System.out.println("astargs: " + callParent.getId());
    String parentReturnType = callParent.getActualReturnType();
    STFunction functionCalled = SimpleNode.symbolTable.doesFunctionExist(((ASTCall) this.parent).value);
    if (parentReturnType.equals(SimpleNode.className) || parentReturnType.equals("this")) {
      if (functionCalled != null) {
        ((SimpleNode) this.parent).actualReturnType = functionCalled.getReturn().getType();
      } else {
        super.printSemanticError("Invalid call to method (method not found in this class)");
      }
    } else if (parentReturnType.equals("int") || parentReturnType.equals("int[]") || parentReturnType.equals("boolean")  ) {
      super.printSemanticError("Invalid call to method (can't invoke methods on primitives)");
    }

    //end
    
    if (functionCalled != null) {
      LinkedHashMap<String, STO> paramsNeeded = functionCalled.getParams();
      Node[] args = ((SimpleNode) this).children;
      int numArguments;
      if (args == null) {
        numArguments = 0;
      } else {
        numArguments = ((SimpleNode) this).children.length;
      }
      if (paramsNeeded.size() != numArguments) {
        super.printSemanticError("No function signature for identifier " + this.value + " and specified number of arguments found");
        return;
      }
  
      Iterator<Map.Entry<String, STO>> it = paramsNeeded.entrySet().iterator();
      int count = 0;
      STO argument, parameter;
      String argIdentifier;
      
      while (it.hasNext() && count < ((SimpleNode) this).children.length) {
        //System.out.println(((SimpleNode) this.children[0]).children.length);
        Map.Entry<String, STO> symbol = it.next();
        if (!symbol.getValue().getType().equals(((SimpleNode) this.children[count]).getReturnType())) {
          super.printSemanticError("No function signature for identifier " + this.value + " and specified arguments found");
          return;
        }
        count++;
      }
    }
  }

}
/* JavaCC - OriginalChecksum=5d9de5a6ebbff5cf5c8cda2f19272e53 (do not edit this line) */
