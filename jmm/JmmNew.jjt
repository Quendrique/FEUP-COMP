options {
 LOOKAHEAD=2;
 MULTI=true;
}
PARSER_BEGIN(JmmNew)
import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;

public class JmmNew
{
 public static void main(String args[]) throws ParseException {

    final String FILENAME = args[0];

    BufferedReader br = null;
	  FileReader fr = null;

		try {

			//br = new BufferedReader(new FileReader(FILENAME));
			fr = new FileReader(FILENAME);
			br = new BufferedReader(fr);

		} catch (IOException e) {
			e.printStackTrace();
		}

    JmmNew myJmmNew = new JmmNew(br);
    SimpleNode root = myJmmNew.Program();
    root.dump("");

 }
    
}
PARSER_END(JmmNew)
SKIP :
{
    " " | "\r" | "\t" | "\n" 
}

SKIP :
{
  "/*" : multilinecomment
}

SKIP :
{
  "//" : singlelinecomment
}

< multilinecomment >
SKIP :
{
  "*/" : DEFAULT
| < ~[ ] >
}

< singlelinecomment >
SKIP :
{
  < [ "\n", "\r" ] > : DEFAULT
| < ~[ ] >
}


TOKEN:
{
    < CLASS: "class">
    | < EXTENDS: "extends" >
    | < PUBLIC: "public">
    | < STATIC: "static">
    | < VOID: "void">
    | < MAIN: "main">
    | < IF: "if">
    | < ELSE: "else">
    | < WHILE: "while">
    | < RETURN: "return">
    | < OB: "{" >
    | < CB: "}" >
    | < OSQB: "[" >
    | < CSQB: "]" >
    | < OPRNT: "(">
    | < CPRNT: ")">
    | < CM: ",">
    | < PNT: ".">
    | < SCM: ";" >
    | < EQLS: "=">
    | < NOT: "!">
    | < AND: "&&">
    | < LS: "<">
    | < PLS: "+">
    | < MNS: "-">
    | < SLSH: "/">
    | < ASTRSK: "*">
    | < INT: "int" >
    | < BOOLEAN: "boolean" >
    | < STRING: "String">
    | < TRUE: "true">
    | < FALSE: "flase">
    | < THIS: "this">
    | < NEW: "new">
    | < LENGTH: "length">
    | < IDENTIFIER: (["A"-"Z","a"-"z","_","-"](["0"-"9","A"-"Z","a"-"z","_","-"])*)>
    | < INTEGERLITERAL: (["0"-"9"])+>
}




SimpleNode Program(): {}
{
    ClassDeclaration() {return jjtThis;} <EOF>
}

void ClassDeclaration(): {}
{
    <CLASS> <IDENTIFIER> [<EXTENDS> <IDENTIFIER>] <OB> 
        (VarDeclaration())*  
        
        
        (MainDeclaration() | MethodDeclaration())*
    <CB>
}

void VarDeclaration(): {Token t;}
{
    Type() t=<IDENTIFIER> {jjtThis.setIdentifier(t.image);} <SCM>
}

void MainDeclaration(): {}
{
    <PUBLIC> <STATIC> <VOID> <MAIN> <OPRNT> <STRING> <OSQB> <CSQB> <IDENTIFIER> <CPRNT> <OB>
        (VarDeclaration())*
        (Statement())*
    <CB>
}

void MethodDeclaration(): {}
{
    <PUBLIC> Type() <IDENTIFIER> <OPRNT> 
    [
        Type() <IDENTIFIER> 
        (
            <CM> Type() <IDENTIFIER>
        )*
    ]
    <CPRNT>
    <OB>
        (VarDeclaration())*
        (Statement())*
        <RETURN> Expression() <SCM>
    <CB>
}

//LOOKAHEAD 2
void Type(): {Token t;}
{
    t=<INT> {jjtThis.setType(t.image);}  <OSQB> <CSQB>
    | t=<BOOLEAN> {jjtThis.setType(t.image);} 
    | t=<INT> {jjtThis.setType(t.image);} 
    | t=<IDENTIFIER> {jjtThis.setType(t.image);} 
}

//LOOKAHEAD 1
void Statement(): {}
{
    <OB>
        (Statement())*
    <CB>
    |
    <IF> <OPRNT> Expression() <CPRNT> Statement() <ELSE> Statement()
    |
    <WHILE> <OPRNT> Expression() <CPRNT> Statement()
    |
    Expression() <SCM>
    |
    <IDENTIFIER> <EQLS> Expression() <SCM>
    |
    <IDENTIFIER> <OSQB> Expression() <CSQB> <EQLS> Expression() <SCM>
}

//LOOKAHEAD 2
void Expression(): {}
{

    Lt() ExpressionNR()
    |
    <INTEGERLITERAL> ExpressionNR()
    |
    <TRUE> ExpressionNR()
    |
    <FALSE> ExpressionNR()
    |
    <IDENTIFIER> ExpressionNR()
    |
    <THIS> ExpressionNR()
    |
    <NEW> <INT> <OSQB> Expression() <CSQB> ExpressionNR()
    |
    <NEW> <IDENTIFIER> <OPRNT> <CPRNT> ExpressionNR()
    |
    <NOT> Expression() ExpressionNR()
    |
    <OPRNT> Expression() <CPRNT> ExpressionNR()

}

void ExpressionNR(): {}
{
    <AND> Lt() ExpressionNR()
    |
    <OSQB> Expression() <CSQB> ExpressionNR()
    |
    <PNT> <LENGTH> ExpressionNR()
    |
    <PNT> <IDENTIFIER> <OPRNT> (
        Expression()
        (<CM> Expression())*
    )*
    <CPRNT> ExpressionNR()
    |
    {}

}

void Lt(): {}
{

  AddSub() LtNR()

}

void LtNR(): {}
{
  <LS> AddSub() LtNR()
  |
  {}
} 

void AddSub() #void: {}
{
  MultDiv() AddSubNR()
}

void AddSubNR() #void: {}
{
  <PLS>  MultDiv() AddSubNR() #Add(2)
  | 
  <MNS>  MultDiv() AddSubNR() #Sub(2)
  |
  {}
}

void MultDiv() : {Token t;}
{
  t= <INTEGERLITERAL> { jjtThis.setVal(Integer.parseInt(t.image));}
  MultDivNR()
}

void MultDivNR() : {Token t;}
{
  <ASTRSK> t= <INTEGERLITERAL> { jjtThis.setVal(Integer.parseInt(t.image));} MultDivNR() 
  | 
  <SLSH> t= <INTEGERLITERAL> { jjtThis.setVal(Integer.parseInt(t.image));} MultDivNR() 
  |
  {}
}



