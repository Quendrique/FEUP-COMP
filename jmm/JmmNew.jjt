options {
 LOOKAHEAD=2;
 MULTI=true;
 DEBUG_PARSER=true;
}
PARSER_BEGIN(JmmNew)
import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;

public class JmmNew{

  static int errorCount=0;

 public static void main(String args[]) throws ParseException {

    final String FILENAME = args[0];

    BufferedReader br = null;
    FileReader fr = null;

    try {
        fr = new FileReader(FILENAME);
        br = new BufferedReader(fr);

    } catch (IOException e) {
        e.printStackTrace();
    }

    JmmNew myJmmNew = new JmmNew(br);
    SimpleNode root = myJmmNew.Program();
    root.dump("");

 }
    
}
PARSER_END(JmmNew)
SKIP :
{
    " " | "\r" | "\t" | "\n" 
}

SKIP :
{
  "/*" : multilinecomment
}

SKIP :
{
  "//" : singlelinecomment
}

< multilinecomment >
SKIP :
{
  "*/" : DEFAULT
| < ~[ ] >
}

< singlelinecomment >
SKIP :
{
  < [ "\n", "\r" ] > : DEFAULT
| < ~[ ] >
}


TOKEN:
{
    < CLASS: "class">
    | < EXTENDS: "extends" >
    | < PUBLIC: "public">
    | < STATIC: "static">
    | < VOID: "void">
    | < MAIN: "main">
    | < IF: "if">
    | < ELSE: "else">
    | < WHILE: "while">
    | < RETURN: "return">
    | < OB: "{" >
    | < CB: "}" >
    | < OSQB: "[" >
    | < CSQB: "]" >
    | < OPRNT: "(">
    | < CPRNT: ")">
    | < CM: ",">
    | < PNT: ".">
    | < SCM: ";" >
    | < EQLS: "=">
    | < NOT: "!">
    | < AND: "&&">
    | < LS: "<">
    | < PLS: "+">
    | < MNS: "-">
    | < SLSH: "/">
    | < ASTRSK: "*">
    | < INT: "int" >
    | < BOOLEAN: "boolean" >
    | < STRING: "String">
    | < TRUE: "true">
    | < FALSE: "flase">
    | < THIS: "this">
    | < NEW: "new">
    | < LENGTH: "length">
    | < IDENTIFIER: (["A"-"Z","a"-"z","_"](["0"-"9","A"-"Z","a"-"z","_"])*)>
    | < INTEGERLITERAL: (["0"-"9"])+>
}




SimpleNode Program(): {}
{
    ClassDeclaration() {return jjtThis;} <EOF>
}

void ClassDeclaration(): {}
{
    <CLASS> <IDENTIFIER> [<EXTENDS> <IDENTIFIER>] <OB> 
        (VarDeclaration())*  
        
        
        (MainDeclaration() | MethodDeclaration())*
    <CB>
}

void VarDeclaration(): {Token t;}
{
    Type() t=<IDENTIFIER> {jjtThis.setIdentifier(t.image);} <SCM>
}

void MainDeclaration(): {}
{
    <PUBLIC> <STATIC> <VOID> <MAIN> <OPRNT> <STRING> <OSQB> <CSQB> <IDENTIFIER> <CPRNT> <OB>
        (VarDeclaration())*
        (Statement())*
    <CB>
}

void MethodDeclaration(): {}
{
    <PUBLIC> Type() <IDENTIFIER> <OPRNT> 
    [
        Type() <IDENTIFIER> 
        (
            <CM> Type() <IDENTIFIER>
        )*
    ]
    <CPRNT>
    <OB>
        (VarDeclaration())*
        (Statement())*
        <RETURN> Expression() <SCM>
    <CB>
}

//LOOKAHEAD 2
void Type(): {Token t;}
{
    (
        t=<INT> <OSQB> <CSQB>
        | t=<BOOLEAN>  
        | t=<INT> 
        | t=<IDENTIFIER>  
    )
    {jjtThis.setType(t.image);}
}

//LOOKAHEAD 1
void Statement(): {}
{
    <OB>
        (Statement())*
    <CB>
    |
    <IF> <OPRNT> Expression() <CPRNT> Statement() <ELSE> Statement()
    |
    While()
    |
    Expression() <SCM>
    |
    <IDENTIFIER> <EQLS> Expression() <SCM>
    |
    <IDENTIFIER> <OSQB> Expression() <CSQB> <EQLS> Expression() <SCM>
}

void While(): {}
{
  <WHILE> <OPRNT>
    try {
        Expression() <CPRNT>
    } 
    catch(ParseException e) {
      System.out.println(e.getMessage());
      JmmNew.errorCount++;
      Token t;

      if(JmmNew.errorCount>10){
          System.out.println(JmmNew.errorCount + " erros: exiting program");
          System.exit(1);
        }

      do {
        t = getNextToken();
      } while (t.kind != CPRNT);
    }
    Statement() 
}

//LOOKAHEAD 2
void Expression() : {}
{
  And()
}

void And() : {}
{
  Lt() (<AND> Lt() )*
}

void Lt() : {}
{
  AddSub() (<LS> AddSub())*
}

void AddSub() : {}
{
  MultDiv() ((<PLS> | <MNS>) MultDiv() )*
}

void MultDiv() : {}
{
  Literal() ((<ASTRSK> | <SLSH>) Literal() )*
}

void Literal() : {}
{
  <INTEGERLITERAL> LiteralNR() #ASTIdentifier
  |
  <TRUE> LiteralNR() #ASTTrue
  |
  <FALSE> LiteralNR() #ASTFalse
  |
  <IDENTIFIER> LiteralNR() #ASTIdentifier
  |
  <THIS> LiteralNR()
  |
  <NEW> <INT> <OSQB> Literal() <CSQB> LiteralNR()
  |
  <NEW> <IDENTIFIER> <OPRNT> <CPRNT> LiteralNR()
  |
  <NOT> Literal() LiteralNR()
  |
  <OPRNT> Literal() <CPRNT> LiteralNR()
}

void LiteralNR() : {}
{
  <OSQB> Literal() <CSQB> LiteralNR()
  |
  <PNT> <LENGTH> LiteralNR()
  |
  <PNT> <IDENTIFIER> <OPRNT> (
      Literal()
      (<CM> Literal())*
  )*
  <CPRNT> LiteralNR()
  |
  {}
}



