options {
 LOOKAHEAD=2;
}
PARSER_BEGIN(Jmm)
import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;

public class Jmm
{
 public static void main(String args[]) throws ParseException {

    final String FILENAME = args[0];

    BufferedReader br = null;
	FileReader fr = null;

		try {

			//br = new BufferedReader(new FileReader(FILENAME));
			fr = new FileReader(FILENAME);
			br = new BufferedReader(fr);

		} catch (IOException e) {
			e.printStackTrace();
		}



    Jmm myJmm = new Jmm(br);
    SimpleNode root = myJmm.Program();
    root.dump("");

 }
    
}
PARSER_END(Jmm)
SKIP :
{
    " " | "\r" | "\t" | "\n"
}


TOKEN:
{
    < CLASS: "class">
    | < EXTENDS: "extends" >
    | < OB: "{" >
    | < CB: "}" >
    | < OSQB: "[" >
    | < CSQB: "]" >
    | < SC: ";" >
    | < INT: "int" >
    | < BOOLEAN: "boolean" >
    | < INTEGER: (["0"-"9"])+ >
    | < IDENTIFIER: (["A"-"Z","a"-"z"](["0"-"9","A"-"Z","a"-"z"])*)>
}


SimpleNode Program(): {}
{
    ClassDeclaration() {return jjtThis;} <EOF>
}

void ClassDeclaration(): {}
{
    <CLASS> <IDENTIFIER> [<EXTENDS> <IDENTIFIER>] <OB> 
        (VarDeclaration())*  /*(MainDeclaration() | MethodDeclaration())**/
    <CB>
}

void VarDeclaration(): {}
{
    Type() <IDENTIFIER> <SC>
}

//INCOMPLETE
/*void MainDeclaration(): {}
{
    <IDENTIFIER>
}

//INCOMPLETE
void MethodDeclaration(): {}
{
    <IDENTIFIER>
}*/

void Type(): {}
{
    <INT> <OSQB> <CSQB>
    | <BOOLEAN>
    | <INT>
    | <IDENTIFIER>
}