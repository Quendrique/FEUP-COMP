/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. Jmm.jj */
/*@egen*/options {
 LOOKAHEAD=2;
}
PARSER_BEGIN(Jmm)
import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;

public class Jmm/*@bgen(jjtree)*/implements JmmTreeConstants/*@egen*/
{/*@bgen(jjtree)*/
  protected static JJTJmmState jjtree = new JJTJmmState();

/*@egen*/
 public static void main(String args[]) throws ParseException {

    final String FILENAME = args[0];

    BufferedReader br = null;
	FileReader fr = null;

		try {

			//br = new BufferedReader(new FileReader(FILENAME));
			fr = new FileReader(FILENAME);
			br = new BufferedReader(fr);

		} catch (IOException e) {
			e.printStackTrace();
		}



    Jmm myJmm = new Jmm(br);
    SimpleNode root = myJmm.Program();
    root.dump("");

 }
    
}
PARSER_END(Jmm)
SKIP :
{
    " " | "\r" | "\t" | "\n"
}


TOKEN:
{
    < CLASS: "class">
    | < EXTENDS: "extends" >
    | < OB: "{" >
    | < CB: "}" >
    | < OSQB: "[" >
    | < CSQB: "]" >
    | < SC: ";" >
    | < INT: "int" >
    | < BOOLEAN: "boolean" >
    | < INTEGER: (["0"-"9"])+ >
    | < IDENTIFIER: (["A"-"Z","a"-"z"](["0"-"9","A"-"Z","a"-"z"])*)>
}


SimpleNode Program(): {/*@bgen(jjtree) Program */
  SimpleNode jjtn000 = new SimpleNode(JJTPROGRAM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Program */
    try {
/*@egen*/
    ClassDeclaration() {return jjtn000;} <EOF>/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void ClassDeclaration(): {/*@bgen(jjtree) ClassDeclaration */
  SimpleNode jjtn000 = new SimpleNode(JJTCLASSDECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ClassDeclaration */
    try {
/*@egen*/
    <CLASS> <IDENTIFIER> [<EXTENDS> <IDENTIFIER>] <OB> 
        (VarDeclaration())*  /*(MainDeclaration() | MethodDeclaration())**/
    <CB>/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

//INCOMPLETE
void VarDeclaration(): {/*@bgen(jjtree) VarDeclaration */
  SimpleNode jjtn000 = new SimpleNode(JJTVARDECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) VarDeclaration */
    try {
/*@egen*/
    Type() <IDENTIFIER> <SC>/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

//INCOMPLETE
/*void MainDeclaration(): {}
{
    <IDENTIFIER>
}

//INCOMPLETE
void MethodDeclaration(): {}
{
    <IDENTIFIER>
}*/

void Type(): {/*@bgen(jjtree) Type */
  SimpleNode jjtn000 = new SimpleNode(JJTTYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Type */
    try {
/*@egen*/
    <INT> <OSQB> <CSQB>
    | <BOOLEAN>
    | <INT>
    | <IDENTIFIER>/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}