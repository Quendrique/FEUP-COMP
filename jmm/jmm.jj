/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. Jmm.jj */
/*@egen*/options {
 LOOKAHEAD=3;
}
PARSER_BEGIN(Jmm)
import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;

public class Jmm/*@bgen(jjtree)*/implements JmmTreeConstants/*@egen*/
{/*@bgen(jjtree)*/
  protected static JJTJmmState jjtree = new JJTJmmState();

/*@egen*/
 public static void main(String args[]) throws ParseException {

    final String FILENAME = args[0];

    BufferedReader br = null;
	FileReader fr = null;

		try {

			//br = new BufferedReader(new FileReader(FILENAME));
			fr = new FileReader(FILENAME);
			br = new BufferedReader(fr);

		} catch (IOException e) {
			e.printStackTrace();
		}



    Jmm myJmm = new Jmm(br);
    SimpleNode root = myJmm.Program();
    root.dump("");

 }
    
}
PARSER_END(Jmm)
SKIP :
{
    " " | "\r" | "\t" | "\n"
}


TOKEN:
{
    < CLASS: "class">
    | < EXTENDS: "extends" >
    | < PUBLIC: "public">
    | < STATIC: "static">
    | < VOID: "void">
    | < MAIN: "main">
    | < IF: "if">
    | < ELSE: "else">
    | < WHILE: "while">
    | < RETURN: "return">
    | < OB: "{" >
    | < CB: "}" >
    | < OSQB: "[" >
    | < CSQB: "]" >
    | < OPRNT: "(">
    | < CPRNT: ")">
    | < CM: ",">
    | < SCM: ";" >
    | < EQLS: "=">
    | < NOT: "!">
    | < AND: "&&">
    | < LS: "<">
    | < PLS: "+">
    | < MNS: "-">
    | < DVD: "/">
    | < MLT: "*">
    | < INT: "int" >
    | < BOOLEAN: "boolean" >
    | < STRING: "String">
    | < INTEGER: (["0"-"9"])+ >
    | < TRUE: "true">
    | < FALSE: "flase">
    | < THIS: "this">
    | < NEW: "new">
    | < LENGTH: "length">
    | < IDENTIFIER: (["A"-"Z","a"-"z"](["0"-"9","A"-"Z","a"-"z"])*)>
    | < INTEGERLITERAL: (["0"-"9"])*>
}


SimpleNode Program(): {/*@bgen(jjtree) Program */
  SimpleNode jjtn000 = new SimpleNode(JJTPROGRAM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Program */
    try {
/*@egen*/
    ClassDeclaration() {return jjtn000;} <EOF>/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void ClassDeclaration(): {/*@bgen(jjtree) ClassDeclaration */
  SimpleNode jjtn000 = new SimpleNode(JJTCLASSDECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ClassDeclaration */
    try {
/*@egen*/
    <CLASS> <IDENTIFIER> [<EXTENDS> <IDENTIFIER>] <OB> 
        (VarDeclaration())*  (MainDeclaration())* /*| MethodDeclaration())**/
    <CB>/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void VarDeclaration(): {/*@bgen(jjtree) VarDeclaration */
  SimpleNode jjtn000 = new SimpleNode(JJTVARDECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) VarDeclaration */
    try {
/*@egen*/
    Type() <IDENTIFIER> <SCM>/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void MainDeclaration(): {/*@bgen(jjtree) MainDeclaration */
  SimpleNode jjtn000 = new SimpleNode(JJTMAINDECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) MainDeclaration */
    try {
/*@egen*/
    <PUBLIC> <STATIC> <VOID> <MAIN> <OPRNT> <STRING> <OSQB> <CSQB> <IDENTIFIER> <CPRNT> <OB>
        (VarDeclaration())*
        (Statement())*
    <CB>/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void MethodDeclaration(): {/*@bgen(jjtree) MethodDeclaration */
  SimpleNode jjtn000 = new SimpleNode(JJTMETHODDECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) MethodDeclaration */
    try {
/*@egen*/
    <PUBLIC> Type() <IDENTIFIER> <OPRNT> 
    [
        Type() <IDENTIFIER> 
        (
            <CM> Type() <IDENTIFIER>
        )*
    ]
    <CPRNT>
    <OB>
        (VarDeclaration())*
        (Statement())*
        <RETURN> Expression() <SCM>
    <CB>/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

//LOOKAHEAD 2
void Type(): {/*@bgen(jjtree) Type */
  SimpleNode jjtn000 = new SimpleNode(JJTTYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Type */
    try {
/*@egen*/
    <INT> <OSQB> <CSQB>
    | <BOOLEAN>
    | <INT>
    | <IDENTIFIER>/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

//LOOKAHEAD 2
void Statement(): {/*@bgen(jjtree) Statement */
  SimpleNode jjtn000 = new SimpleNode(JJTSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Statement */
    try {
/*@egen*/
    <OB>
        (Statement())*
    <CB>
    |
    <IF> <OPRNT> Expression() <CPRNT> Statement() <ELSE> Statement()
    |
    <WHILE> <OPRNT> Expression() <CPRNT> Statement()
    |
    Expression() <SCM>
    |
    <IDENTIFIER> <EQLS> Expression() <SCM>
    |
    <IDENTIFIER> <OSQB> Expression() <CSQB> <EQLS> Expression() <SCM>/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

//LOOKAHEAD 3
void Expression(): {/*@bgen(jjtree) Expression */
  SimpleNode jjtn000 = new SimpleNode(JJTEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Expression */
    try {
/*@egen*/
    /*NRExpression() (<AND> | <LS> | <PLS> | <MNS> | <DVD> | <MTP>) Expression()
    |
    */
    <IDENTIFIER>/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

//#SayNoToLeftRecursion
void NRExpression(): {/*@bgen(jjtree) NRExpression */
  SimpleNode jjtn000 = new SimpleNode(JJTNREXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) NRExpression */
    try {
/*@egen*/
    <IDENTIFIER>/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}